# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_util.ipynb (unless otherwise specified).

__all__ = ['Vector', 'LabeledPoint', 'dot', 'sum_of_squares', 'magnitude', 'distance', 'euclidean_distance', 'X',
           'split_data']

# Cell
from typing import List, NamedTuple

Vector = List[float]

# Cell
class LabeledPoint(NamedTuple):
    point: Vector
    label: str

# Cell
import math

def dot(v: Vector, w: Vector) -> float:
    """Returns v_1 * w_1 + ... + v_n * w_n"""
    assert len(v) == len(w), "vectors must be same length"

    return sum(v_i * w_i for v_i, w_i in zip(v, w))

def sum_of_squares(v: Vector) -> float:
    """Returns vect_1 * vect_2 + ... + vect_n * vect_n"""
    return dot(v, v)

def magnitude(v: Vector) -> float:
    """Returns the magnitude (or length) of v"""
    return math.sqrt(sum_of_squares(v))

def distance(v: Vector, w: Vector) -> float:
    """Computes distance between v and w"""
    return magnitude(subtract(v, w))

def euclidean_distance(v: Vector, w: Vector) -> float:
    """ """
    distance = 0.0
    for i in range(len(row1)-1):
        distance += (row1[i] - row2[i])**2
    return sqrt(distance)

# Cell
import random
from typing import TypeVar, List, Tuple

X = TypeVar('X')    # generic type to represent a data point

# Cell
def split_data(data: List[X], prob: float) -> Tuple[List[X], List[X]]:
    """Split data into fractions"""
    data = data[:]
    random.shuffle(data)
    cut = int(len(data) * prob)
    return data[:cut], data[cut:]